// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.15.8
// source: seed_generation.proto

package seed_generation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeedGenerationService_GetSeed_FullMethodName    = "/seed_generation.SeedGenerationService/GetSeed"
	SeedGenerationService_Ping_FullMethodName       = "/seed_generation.SeedGenerationService/Ping"
	SeedGenerationService_StressTest_FullMethodName = "/seed_generation.SeedGenerationService/StressTest"
)

// SeedGenerationServiceClient is the client API for SeedGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeedGenerationServiceClient interface {
	GetSeed(ctx context.Context, in *GetSeedRequest, opts ...grpc.CallOption) (*GetSeedResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	StressTest(ctx context.Context, in *StressTestRequest, opts ...grpc.CallOption) (*StressTestResponse, error)
}

type seedGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeedGenerationServiceClient(cc grpc.ClientConnInterface) SeedGenerationServiceClient {
	return &seedGenerationServiceClient{cc}
}

func (c *seedGenerationServiceClient) GetSeed(ctx context.Context, in *GetSeedRequest, opts ...grpc.CallOption) (*GetSeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeedResponse)
	err := c.cc.Invoke(ctx, SeedGenerationService_GetSeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedGenerationServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SeedGenerationService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedGenerationServiceClient) StressTest(ctx context.Context, in *StressTestRequest, opts ...grpc.CallOption) (*StressTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StressTestResponse)
	err := c.cc.Invoke(ctx, SeedGenerationService_StressTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeedGenerationServiceServer is the server API for SeedGenerationService service.
// All implementations must embed UnimplementedSeedGenerationServiceServer
// for forward compatibility.
type SeedGenerationServiceServer interface {
	GetSeed(context.Context, *GetSeedRequest) (*GetSeedResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	StressTest(context.Context, *StressTestRequest) (*StressTestResponse, error)
	mustEmbedUnimplementedSeedGenerationServiceServer()
}

// UnimplementedSeedGenerationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeedGenerationServiceServer struct{}

func (UnimplementedSeedGenerationServiceServer) GetSeed(context.Context, *GetSeedRequest) (*GetSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeed not implemented")
}
func (UnimplementedSeedGenerationServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSeedGenerationServiceServer) StressTest(context.Context, *StressTestRequest) (*StressTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StressTest not implemented")
}
func (UnimplementedSeedGenerationServiceServer) mustEmbedUnimplementedSeedGenerationServiceServer() {}
func (UnimplementedSeedGenerationServiceServer) testEmbeddedByValue()                               {}

// UnsafeSeedGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeedGenerationServiceServer will
// result in compilation errors.
type UnsafeSeedGenerationServiceServer interface {
	mustEmbedUnimplementedSeedGenerationServiceServer()
}

func RegisterSeedGenerationServiceServer(s grpc.ServiceRegistrar, srv SeedGenerationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeedGenerationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeedGenerationService_ServiceDesc, srv)
}

func _SeedGenerationService_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedGenerationServiceServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedGenerationService_GetSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedGenerationServiceServer).GetSeed(ctx, req.(*GetSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedGenerationService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedGenerationServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedGenerationService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedGenerationServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedGenerationService_StressTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StressTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedGenerationServiceServer).StressTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeedGenerationService_StressTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedGenerationServiceServer).StressTest(ctx, req.(*StressTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeedGenerationService_ServiceDesc is the grpc.ServiceDesc for SeedGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeedGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seed_generation.SeedGenerationService",
	HandlerType: (*SeedGenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeed",
			Handler:    _SeedGenerationService_GetSeed_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SeedGenerationService_Ping_Handler,
		},
		{
			MethodName: "StressTest",
			Handler:    _SeedGenerationService_StressTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seed_generation.proto",
}
